[{"title":"混合APP","date":"2017-04-17T01:09:23.000Z","path":"2017/04/17/混合APP/","text":"","tags":[{"name":"移动APP","slug":"移动APP","permalink":"http://yoursite.com/tags/移动APP/"}]},{"title":"Vue笔记","date":"2017-03-28T09:06:43.000Z","path":"2017/03/28/Vue笔记/","text":"","tags":[]},{"title":"Github","date":"2016-10-01T12:56:58.000Z","path":"2016/10/01/Github/","text":"4. GithubGithub 是为开发者提供 Git 仓库的托管服务。是一个可以让开发者与朋友、同事、同学及陌生人共享代码的完美平台。简而言之，Github 就是程序员的新浪微博，社交化编程。 GitHub Guides GitHub Training &amp; Guides GitHub入门与实践 4.1 介绍 Github 与 Git 的区别 Git 是一个分布式版本控制系统 历史记录的问题 多人协作的问题 Github 是为开发者提供 Git 仓库的托管服务 不仅仅是 Git 仓库的托管服务 社交元素：项目点赞、关注项目Watch、Pull Request 等功能 Pull Request：假设你修改了一个开源仓库源代码 你可以通过 Pull Request 请求合并，请求合并到源代码仓库中 当你发送了请求合并，别人会收到你的合并请求，然后会检查你的合并请求，如果没有问题，就可以直接合并到源代码库中 Github Flavored Markdown 写说明文档、发布评论等都使用的是 Markdown 基本上各大开源产品都在 Github 上 jQuery、bootstrap、AngularJS、Vue、React、Node 4.2 基本使用 创建账户 设置头像 创建仓库 连接仓库 公开代码 克隆仓库 clone 编写代码 提交 commit 进行 push 4.3 Pull Request演示社交化编程 fork 表示将对方的仓库克隆你的账号下 4.4 使用 Github Pages 搭建静态站点[GitHub Pages - 官方教程] 我们可以把静态网站部署到 Github 上，然后通过特定的域名就可以访问了。 在 github 上创建一个空仓库，仓库名称以 你自己github用户名.github.io 然后提交文件到该仓库中，注意：仓库根路径必须有一个 index.html 文件 接下来就可以通过 你自己的github用户名.github.io 来访问你托管的那个静态网站仓库了，默认去找 index.html 页面 还可以通过创建不同名字的仓库用来托管别的静态网站项目，如果想要通过你的github域名来访问，就必须把你托管的文件放到一个叫做 gh-pages 的分支中。然后就可以通过 你的github用户名.github.io/拥有gh-pages分支的仓库名称 来访问你的这个网站了 Github 总结 有的公司用 Github Gitlab 搭建在公司内部本地 一个开源的类似于 Github 功能的网站，开源部署在本地免费使用 有一些公司也是自己搭建的 Gitlab 本地仓库服务供团队开发使用 coding bitbucket 开源免费托管私有仓库","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git学习笔记","date":"2016-10-01T12:49:59.000Z","path":"2016/10/01/Git学习笔记/","text":"3. Git3.1 Linus Torvalds 维基百科 - Linux 维基百科 - 林纳斯·托瓦兹 百度百科 - 林纳斯·托瓦兹 林纳斯·托瓦兹 (Linus Torvalds) 为什么被称作大神？ Linux之父炮轰C++：糟糕程序员的垃圾语言 YouTube - Linus Torvalds: Nvidia, * You! 颠覆世界的“自由主义教皇”林纳斯 1969年12月28日出生于芬兰赫尔辛基市，目前拥有美国国籍 Linux内核的最早作者，随后发起了这个开源项目，担任Linux内核的首要架构师与项目协调者 当今世界最著名的电脑程序员、黑客之一 还发起了Git这个开源项目，并为主要的开发者 书籍推荐 只是为了好玩:Linux之父林纳斯自传 浪潮之巅 数学之美 文明之光 3.2 诞生背景Git 翻译过来就是 饭桶 的意思，老外就是喜欢这样的命名。 gulp、grunt、bower、formidable、amazing、awesome、great Git的诞生 Git诞生背后的一些故事 Git 简史 Git 诞生 11 年后，BitKeeper 宣布开源 Linus 原来带领数百万人开发 Linux 操作系统 使用 BitKeeper 作为团队的版本协同工具 商业收费 免费给 Linux 开发团队使用 直到有一天，其中有个开发人员试图去破解 BitKeeper 这个收费软件 被 BitKeeper 发现了，就要收回 Linux 团队的免费使用权限 Linus 大神一怒之下，在两三个星期之内就开发出了 Git 的初版 谭浩强 - c语言入门 谭浩强了写了 c语言入门，那就有这门语言入门的好书了 3.3 分布式版本控制 3.4 安装和配置 Git 环境下载地址：https://git-for-windows.github.io/ 历史版本地址：https://github.com/git-for-windows/git/releases 3.5 初始设置12$ git config --global user.name \"yourname\"$ git config --global user.email \"your_email@example.com\" 设置一下提交记录中的日志信息，待会儿让可以通过查看提交日志看到，执行上面两条命令在任何目录都可以，而且只需要在第一次安装了 git 环境之后配置一下即可。 如果想要修改，可以使用上面命令重新执行即可修改，也可以使用另外一种方式，执行上面命令之后会在用户目录下生成一个叫做 .gitconfig 的文件，所以也可以通过修改该文件来修改git的配置。 3.6 基本操作 git init 通过该命令创建一个本地仓库 执行过后，会在目录下生成一个 .git 隐藏目录，最好不要手动修改 git status 查看当前工作树状态 例如有新增的文件、修改的、删除的、等操作没有被添加到暂存区或者没有被提交 都可以通过 git status 命令看到 git add 文件名 将制定的文件添加到暂存区（待提交列表） git commit -m &quot;提交日志&quot; 将暂存区（待提交列表）中的文件提交到本地仓库，形成一个历史快照 git log 查看提交日志 gitk 以图形化的界面查看本地仓库提交日志状态 3.7 分支的操作git 的灵魂：分支 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 交替切换分支：git checkout - 创建+切换分支：git checkout -b &lt;name&gt; 基于某个分支创建新的分支并切换到该分支：git checkout -b &lt;name&gt; &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 合并某分支到当前分支并提交记录提交日志：git merge --no-ff &lt;name&gt; -m &quot;提交日志&quot; 删除分支：git branch -d &lt;name&gt; 以图表形式查看日志 git log --graph 分支管理策略： master 代码库应该有一个、且仅有一个主分支，所有提供给用户使用的正式版本，都在这个主分支上发布 Git主分支的名字，默认叫做 master 主分支只用来分布重大版本 develop 日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop 如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge） 合并的时候最好采用 --no-ff 的形式，在 master 上形成一个提交历史记录节点 feature-特性名 特性（功能）分支 针对某个具体的功能创建的一个分支 开发的时候，所有开发人员针对 develop 进行开发，然后合并到 master 然后我们可以基于 develop 分支创建一些特性分支（一般是开发人员自己创建的） 团队开发人员都最好都基于 develop 分支去创建自己对应的特性分支，最后去和 develop 分支进行合并 release 预发布分支 发布之前先将 develop 分支预发布到 release 发布分支中 接下来，测试人员就可以拿到这个 release 分支版本，进行测试 测试人员如果在测试的过程中发现 bug，会将 bug 告诉响应的开发人员，bug 追踪系统 fixbug 修改 bug 分支 该分支用于解决测试人员提交给你的 bug 的 fixbug 分支解决完毕之后，最后再次合并到 release 预发布分支中 再次交给测试人员，测试人员回去通过这个分支版本继续测试，找 bug 直到最后没有问题，合并到 master 分支中 一般在开发过程中，会创建一个 develop 的开发分支，永远不要基于 master 分支去开发。master 分支最好用于保留一个没有 bug ，随时可以发送的一个版本。 master 分支是 git 默认创建的分支，基本上所有分支都是以这个分支为中心进行的 不同分支中，可以同时进行完全不同的开发，各个分支之间不会相互影响彼此 等分支的开发完成后再与 master 分支进行合并 master 也叫作主干分支，是所有分支的原点，同时也是合并的终点 通过灵活运用分支，可以让多人同时高效的进行并行开发 关于分支的管理以及分支的协同开发，目前还体会不到，因为没有大型项目可以演练，后面可以在做项目的时候，可以多给大家引入一些分支的使用以体会基于不同的分支开发所带来的好处，目前先以体会概念为主，当然了，很多分支管理策略也只是理论上的畅想而已，真正在开发的过程中，都是可以灵活变通的，并不一定完全遵守死板的规则。 3.8 更改提交的操作指定文件回滚： git checkout [file] 恢复暂存区的指定文件到工作区 git checkout [commit] [file] 恢复某个commit的指定文件到暂存区和工作区 git checkout . 恢复暂存区的所有文件到工作区 指定版本回滚： git reset --hard 恢复暂存区和工作区到上一次最新的提交 git reset --hard 提交哈希值 根据提交哈希值（版本号）回溯到历史版本 git reflog 查看当前仓库操作日志 git commit --amend 修改最近一次提交的提交日志 3.9 推送至远程仓库如果已经有了一个本地仓库，就可以通过下面的形式和线上的空仓库产生关联： remote 添加远程仓库地址 add commit branch 等操作 pull push git remote add origin 远程仓库地址 git 会自动将远程仓库地址起个别名 origin git push -u origin master 推送到名称为 origin 远程仓库地址下的 master 分支下 3.10 从远程仓库获取如果已经创建了一个远程仓库，就可以遵循下面的模式进行开发： clone add commit branch 等操作 Pull push git clone 仓库地址 git 会自动将 origin 设置为该远程仓库地址的标识符 git pull 所以在进行 push 之前，最好前 pull 一下，拉取最新源代码。 3.11 学习资料推荐 git - 简明指南 廖雪峰 - git教程 Pro Git 猴子都能懂的git入门 git参考手册 github入门与实践 Git版本控制管理 3.12 推荐文章知名博主： 阮一峰 社会百科 - 知名博主 - 目前就职于支付宝前端团队 黑客与画家 张鑫旭 对 CSS 研究很深入 git 学习推荐廖雪峰的 git 教程 + 阮一峰的 git 博客整理教程： 廖雪峰 - git教程 Git 使用规范流程 常用 Git 命令清单 Git远程操作详解 Git 工作流程 Git分支管理策略 Commit message 和 Change log 编写指南","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"ES6相关","date":"2016-09-01T13:57:32.000Z","path":"2016/09/01/ES6相关/","text":"","tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"gulp学习笔记","date":"2016-08-12T09:53:05.000Z","path":"2016/08/12/gulp学习笔记/","text":"项目构建 多个开发者共同开发一个项目，每位开发者负责不同的模块，这就会造成一个完整的项目实际上是由许多的“代码版段”组成的； 使用 less、sass 等一些预处理程序，降低CSS的维护成本，最终需要将这些预处理程序进行解析； 合并css、javascript，压缩 html、css、javascript、images可以加速网页打开速度，提升性能； 这一系列的任务完全靠手动完成几乎是不可能的，借助构建工具可以轻松实现。 所谓构建工具是指通过简单配置就可以帮我们实现合并、压缩、校验、预处理等一系列任务的软件工具。 常见的构建工具包括：Grunt、Gulp、F.I.S（百度出品）、webpack Gulp Gulp 是基于 Nodejs 开发的一个构建工具，借助gulp插件可以实现不同的构建任务，以其简洁的配置和卓越的性能成为目前主流的构建工具。 全局安装 npm install -g gulp Gulp 基础 本地安装gulp 进入项目根目录执行 npm install gulp –save-dev（添加–save-dev会在package.json记录依赖关系）。 任务清单 在项目根目录中创建gulpfile.js（这是一个配置文件）12345//引入 gulpvar gulp=require('gulp');gulp.task('default',function()&#123; //定义任务&#125;); 定义任务 在gulpfile.js定义构建任务，如压缩、合并，Gulp自身并不执行任何任务，是通过调用具体插件来完成的。 以编译LESS为例，安装npm install gulp-less，如下定义任务12345678910//引入gulpvar gulp=require('gulp'), //引入编译LESS的插件 less=require('gulp-less');gulp.task('less',function()&#123; //定义任务 return gulp.src('./pbulic/less/*.less') .pipe(less()) .pipe(gulp.dest('./public/css'));&#125;) 执行任务 输入命令 gulp less 1234$ gulp less[15:17:12] using gulpfile E:\\www\\Gulp\\01day\\4-code\\Monment\\gulpfile.js[15:17:12] starting 'less'...[15:17:12] Finished 'less' after 164 ms 这样我们的LESS文件便会编译成CSS了。 Gulp工作原理通过不同的插件实现构建任务，Gulp只是按着配置文件调用执行了这些插件。 Gulp API Gulp是基于NodeJS的，通过require可以引入一个NodeJS的包（模块），其作用类似于浏览器中的script标签引入资源，被引入的包存放在node_modules目录下。 引入gulp包（模块）后返回一个对象，习惯赋值给变量gulp，通过该对象提供的方法（API）完成任务的配置。 gulp.task() 定义各种不同的任务，如下图有两个参数 1234//less任务名称，回调方法里定义任务gulp.task('less',function()&#123; //定义任务&#125;); 不同任务间存在依赖关系时，可以指定依赖，如下1234//通过数组指定有依赖关系的任务gulp.task('less',['依赖1','依赖2','依赖3'],function()&#123; //定义任务&#125;); gulp.src() 需要构建资源的路径，字符串或数组（可以正则方式书写） 12345//less任务名称，回调方法里定义任务gulp.task('less',function()&#123; //需要编译的LESS gulp.src('./public/less/**/*.js')&#125;); gulp.pipe() 管道，将需要构建的资源“输送”给插件。 1234567//less任务名称，回调方法里定义任务gulp.task('less',function()&#123; //需要编译的LESS gulp.src('./public/less/**/*.js') //将src获取的资源传递给less插件 .pipe(less())&#125;); gulp.dest() 构建任务完成后资源存放的路径（会自动创建） 123456789//less任务名称，回调方法里定义任务 gulp.task('less',function()&#123; //需要编译的LESS gulp.src('./public/less/**/*.js') //将src获取的资源传递给less插件 .pipe(less()) //将less插件编译好的文件存储 .pipe(gulp.dest('./public/css')); &#125;); gulp.watch() 常用Gulp插件 gulp-less 编译LESS文件 gulp-autoprefixer 添加CSS私有前缀 gulp-cssmin 压缩CSS gulp-rname重命名 gulp-imagemin 图片压缩 gulp-uglify 压缩Javascript gulp-concat 合并 gulp-htmlmin 压缩HTML gulp-rev 添加版本号 gulp-rev-collector 内容替换 gulp-useref gulp-if","tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"}]},{"title":"AngularJS之模块和控制器","date":"2016-07-03T12:22:41.000Z","path":"2016/07/03/AngularJS之模块和控制器/","text":"模块 模块定义了一个应用程序 模块是应用程序中不同部分的容器 模块是应用控制器的容器 控制器通常属于一个模块 ng 中模块的引入最重要的目的就是为了解决原来全局定义的控制器污染的问题，还有一个目的就是让我们以模块的形式划分架构。 可以通过 angular.module() 方法操作模块注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块 定义模块定义一个模块： 12// 注意：必须指定第二个参数，否则变成获取已定义的模块var demoApp = angular.module('DemoApp', []) 获取已有模块： 1var demoApp = angular.module('DemoApp') 定义依赖别的模块的模块： 1var demoApp = angular.module('DemoApp', ['Module1', 'Module2']) 如何划分模块常见：根据当前需要开发的应用程序的组成划分需要多少模块例如： 注册模块 登陆模块 商品列表页模块 商品详细页模块 等等. 多个模块的形式angular.bootstrap(document, [‘demo’]) 正确的加载多个模块angular.module(‘MainModule’, [‘Module1’, ‘Module2’, ‘Module3’[,ModuleName]]) 控制器 ng 中的控制器用来对 scope 进行操作 包括初始化数据和定义事件响应函数等 ng 用来解耦业务逻辑层和视图层的关键 controller 操作 scope，View 则展现 scope 的内容 传统前端程序中大量复杂的 DOM 操作逻辑都被转变成对 scope 的操作 $scope $scope 是用来视图和数据之间的胶水、粘合剂 视图和控制器之间的数据桥梁 用于在视图和控制器之间传递数据 用来暴露数据模型（数据、行为） 监视模型数据的变化，做出相应的动作 $scope.$watch 如何设计 $scopeViewModel $scope 实际上就是 MVVM 中所谓的 VM（视图模型） 正式因为 $scope 在 ng 中大量使用甚至盖过了 c 的概念，所以很多人把 ng 称之为 mvvm 框架 这一点倒是无所谓 必须掌握的就是如何根据一个原型抽象出对应的视图模型 定义控制器的三种方式定义控制器可以有三种方式，注意第一种已经被淘汰。 第一种：传统方式，使用全局函数定义控制器： 123function DemoCtrl($scope) &#123; // code here&#125; 第二种：挂载在某个模块下 1234angular.module('DemoApp', []) .controller('DemoCtrl', function ($scope) &#123; // code here &#125;) 第三种：最正确的方式 12345// 解决因为代码压缩造成注入对象失败问题的方式就是将第二个参数换成一个数组angular.module('DemoApp', []) .controller('DemoCtrl', ['$scope', '$log', function ($scope, $log) &#123; // code here &#125;]) AngularJS 表达式 AngularJS 表达式写在双大括号内： AngularJS 将在表达式书写的位置”输出”数据 数字 字符串 对象 数组 AngularJS 表达式 很像 JavaScript 表达式：它们可以包含字符串、操作符和变量 与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中 与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常 与 JavaScript 表达式不同，AngularJS 表达式支持过滤器 number date Angular Directive：指令 AngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。 AngularJS 通过内置的指令来为应用添加功能， AngularJS 同时允许你使用内置指令或者自定义指令，从而构建更加超动感的 HTML。 指令属性小提示 ng-xxx 的属性本身并不是标准中定义的属性 很多情况下无法通过语法校验 HTML5 允许扩展的属性，以 data- 开头 在 ng 中可以使用 data-ng- 作为前缀来让网页对 HTML5 有效 二者效果相同 指令示例 ng-app 指令初始化一个 AngularJS 应用程序。 ng-init 指令初始化应用程序数据。 ng-model 指令把元素值（比如输入域的值）绑定到应用程序。 ng-click 指令给元素绑定一个行为函数 ng-repeat 指令可以用来遍历数组循环输出 ng-app ng-app 指令定义了 AngularJS 应用程序的 根元素。 ng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序 ng-initng-init 指令为 AngularJS 应用程序定义了 初始值。通常情况下，不使用 ng-init。一般会在控制器对中模型数据进行初始化。 ng-modelng-model 用来将 ng 模型中的数据和视图中的元素做双向绑定。 ng-bind类似于表达式，和表达式作用基本一致。 注意：ng-bind 必须作用到一个具体的元素位置处 ng-repeatng-repeat 指令对于集合中（数组中）的每个项会 克隆一次当前 HTML 元素。 ng-classng-cloakng-hide-show-ifng-src其它常用指令 ng-checked : 单选/复选是否选中，只是单向绑定数据 ng-disabled : 是否禁用 ng-readonly : 是否只读 ng-selected : 是否选中，只是单向数据绑定 事件型指令 ng-blur ：失去焦点 ng-focus ：得到焦点 ng-change ：发生改变 ng-copy ：拷贝完成 ng-click ：鼠标单击 ng-dblclick ：鼠标双击 ng-submit：表单提交 调试 AngularJS 应用程序 给 window 挂载 $scope Chrome 插件：AngularJS Batarang TodoMVC过滤器：filter过滤器可以用来对输出的数据做格式化输出或者按照条件过滤数组、对象等数据中的内容 过滤器格式如下： 1表达式 | 指定过滤方式 扩展bower.json 文件中 dependencies 字段dependencies字段指定了项目运行所依赖的模块，它们都指向一个对象。 该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。 123\"dependencies\": &#123; \"angular\": \"^1.5.8\"&#125; 这些包或者库的版本都遵循“大版本.次要版本.小版本”的格式规定 大版本 大版本 小版本：一般就是bug的修复或者 对应的版本可以加上各种限定，主要有以下几种： 1234指定版本：比如1.2.2，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。波浪号（tilde）+指定版本：比如~1.2.2，表示安装1.2.x的最新版本（不低于1.2.2），但是不安装1.3.x，也就是说安装时不改变大版本号和次要版本号。插入号（caret）+指定版本：比如ˆ1.2.2，表示安装1.x.x的最新版本（不低于1.2.2），但是不安装2.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。latest：安装最新版本。 科学上网 Shadowsocks：https://shadowsocks.org/en/download/clients.html Shadowsocks 免费账号：http://www.ishadowsocks.net/ Shadowsocks商业版：https://shadowsocks.com/ 可以购买， 很稳定 自己搭建 Shadowsocks 翻墙服务器 第一你要购买一个 国外的 VPS（虚拟主机） 搬瓦工 https://bandwagonhost.com/ 注意：买国内的阿里云、腾讯云不管用 将 Shadowsocks 服务器部署到 国外这个 VPS 上 通过本地客户端设置一下 你部署的服务器的 ip地址、端口号、密码。。 shadowsocks搭建教程：http://shadowsocks.blogspot.com/ 科学上网：用 VPS 搭建 shadowsocks 服务器：http://blog.chinaunix.net/uid-25530360-id-5595974.html 可以搭建自己的个人博客，个人网站、搭建动态的 可以作为自己的专属翻墙服务器 还可以完全自定义你的域名 www.你的名字.com 前端就是不停的折腾 雅虎的YUI 后台虽然难，但是真正玩儿好了，工作之后很轻松 Android 影梭：https://github.com/shadowsocks/shadowsocks-android/ 赛风：http://www.psiphon3.net/zh/index.html 使用教程：http://www.psiphon3.net/zh/user-guide.html 使用教程： http://www.psiphon3.net/zh/user-guide.html Lantern：https://getlantern.org/","tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://yoursite.com/tags/AngularJS/"}]},{"title":"bower学习笔记","date":"2016-07-03T03:28:36.000Z","path":"2016/07/03/bower学习笔记/","text":"bowerbower 是一个适用于Web端第三方包的一个自动化解决方案。 安装包 自动安装依赖项 卸载包 更新包 查找包 保存依赖项 bower 的安装https://bower.io/ node 环境 node -v npm 包管理工具 基于 Node 开发的一个包管理工具 npm 在安装 node 的时候已经被自动安装上了 npm -v git 环境 git --version npm install --global bower 在操作系统全局安装一个命令行软件（CLI） Command Line Interface 执行上面的命令的时候在命令行的任意目录都可以直接执行 安装结束之后，通过输入 bower --version 查看是否安装成功 对于一般的命令行工具，都可以通过 工具名 -V|--version 查看该工具的版本号 或者 工具名 --help|-h 可以查看该工具的使用帮助 bower 基本使用 bower install 包名 在哪个项目下安装包，就切换到哪个项目根路径 当安装成功的时候，bower 默认把包安装到项目根路径下的 bower_components 目录中 bower 在安装包的时候还会自动安装该包的依赖项 bower install 包名#版本号 bower.json 文件 项目使用 bower 的说明文件，可以使用 bower init 命令以向导的形式生成 该文件可以用来保存一些项目名称、作者、依赖项等信息 我们在往 github 上传项目的时候，就不需要把 bower 安装的包也上传上去了，节省时间 别人从 远程仓库拿到我们的项目的时候，直接执行 bower install 命令即可安装项目的依赖项 bower install 包名 --save 将安装的包添加到 bower.json 文件的 dependencies 依赖项中 每个项目如果使用 bower，最好都初始化一个 bower.json 文件 同时在安装这些第三方包的时候都加上 –save 参数，保存依赖项 bower install 该命令执行后，bower 会自动查找当前项目下的 bower.json 文件，找到里面的 dependencies 依赖项数组 然后依次下载每一个依赖项到 bower_components 目录中 bower install 包名 --offline 离线下载 bower 对于下载过的包会缓存到计算机中 使用 –offline 参数就可以实现离线下载 bower uninstall 包名 bower uninstall 包名 --save 卸载包的时候同时把 bower.json 文件中的依赖项删除 .bowerrc 配置文件 该文件必须放到项目根路径下（也就是执行bower命令所处的目录） 该文件可以用来配置一些 bower 的默认行为 例如可以修改安装包的默认路径，示例如下： 123&#123; \"directory\": \"lib\"&#125; 关于 bower 的其它具体使用方式，可以参照官方文档进行学习查看。 学习目标 能概述 AngularJS 是什么 能概述什么是 SPA 应用程序以及掌握锚点在 SPA 应用程序中的使用 能掌握 bower 包管理工具的基本使用 能解释一个基本的 ng 应用程序执行流程（见hello-world代码解析） 能掌握 AngularJS 中的基本的指令和表达式的使用 能掌握 AngularJS 中基本的模块使用（创建模块，依赖模块，获取模块） 能使用 AngularJS 完成模拟用户注册功能","tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://yoursite.com/tags/AngularJS/"}]},{"title":"AngularJS指令","date":"2016-07-01T03:33:46.000Z","path":"2016/07/01/AngularJS指令/","text":"AngularJS 指令AngularJS 指令是以 ng- 作为前缀的 HTML 属性，AngularJS 通过内置的指令来为应用添加功能，AngularJS 同时允许你自定义指令，从而构建更加超动感的 HTML。 HTML5 允许扩展的（自制的）属性，以 data- 开头。AngularJS 属性以 ng- 开头，但是也可以使用 data-ng- 来让网页对 HTML5 有效。 ng-app ng-init ng-model ng-repeat AngularJS 表达式 AngularJS 表达式写在双大括号内： AngularJS 表达式把数据绑定到 HTML，与 ng-bind 指令基本一致 AngularJS 将在表达式书写的位置”输出”数据 数字 字符串 对象 数组 AngularJS 表达式 很像 JavaScript 表达式：它们可以包含字符串、操作符和变量 与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中 与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常 与 JavaScript 表达式不同，AngularJS 表达式支持过滤器 使用 AngularJS 编写计算器应用使用总结 AngularJS 最大程度上减少了页面上的 DOM 操作 让开发人员更专注于业务操作 通过简洁的指令结合页面结构与逻辑数据 通过自定义指令实现组件化编程 代码结构更合理 维护成本更低 AngularJS 解放了传统 JavaScript 中频繁的 DOM 操作 查看官方文档 模块化：ModuleAngularJS 很重要的一个特性就是实现模块化编程，我们可以通过以下方式创建一个模块，对页面进行功能业务上的划分。 定义一个模块： 12// 注意：必须指定第二个参数，否则变成获取已定义的模块var demoApp = angular.module('DemoApp', []) 获取已有模块： 1var demoApp = angular.module('DemoApp') 定义依赖别的模块的模块： 1var demoApp = angular.module('DemoApp', ['Module1', 'Module2']) MV*阮一峰 - 谈谈MVC模式 阮一峰 - MVC，MVP 和 MVVM 的图示 MVC 职责单一 MVC 是一种应用程序的开发思想，不是设计模式 主要目的是为了解决应用程序展示结构，业务逻辑之间的紧耦合关系 使应用程序的组成分为三个部件，每个部件都有自己明确的职责，相互之间没有依赖 MVC 组成 Model（模型）：处理数据和业务逻辑 View（视图）：以友好的方式向用户展示数据 Controller（控制器）：组织调度响应的处理模型 视图交互：MVVM Model View ViewModel Controller MVC 在代码中的体现：用户注册在 AngularJS 中使用 MVC：用户注册体会 MVC 方式构建应用的优势 控制器：Controller 控制器的三种主要职责 为应用中的模型设置初始状态 通过 $scope 对象把数据模型或者函数行为暴露给视图 监视模型的变化，做出相应的动作（$watch） 监视用户输入的用户名，检测是否被占用 监视购物车的内容变化，计算最新结果，只能监视当前 $scope 上的成员 公共的抽象 1234angular.module('DemoApp', []) .controller('DemoController', ['$scope', function ($scope) &#123; // 在这里通过操作 $scope 改变 View 和 ViewModel &#125;]) 相关链接 https://angularjs.org/ http://angular.io/ http://www.runoob.com/angularjs/angularjs-tutorial.html http://www.apjs.net/ http://angularjs.cn/ https://github.com/zensh/AngularjsTutorial_cn https://item.jd.com/11522200.html https://item.jd.com/11845736.html","tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://yoursite.com/tags/AngularJS/"}]},{"title":"AngularJS（一）","date":"2016-06-25T10:59:35.000Z","path":"2016/06/25/AngularJS（一）/","text":"AngularJS简介 前端高级 JavaScript 框架 ，诞生于 2009 年 由 Misko Hevery 等人创建 后被 Google 收购，用于其多款产品 有一个全职的开发团队继续开发和维护这个库 有了这一类框架可以轻松构建 SPA 应用程序 Single Page Application 通过 指令 扩展了 HTML，通过 表达式 绑定数据到 HTML 最大程度上解放了 DOM 操作 构建更加动感的 HTML 应用程序 题外话 学习新技术 官网、社区、博客、书籍 体会到代码的思想 什么是框架和库 框架：Bootstrap 框架一般是封装了很多复杂的操作，提供了某种规则、约定的使用方式 开发人员只需要按照框架的规则、约束、套路来写代码配置即可 库：jQuery 库一般是提供了一些函数、功能API 由开发者使用库提供的这些API，开发业务功能，由开发人员主动调用库里面的功能 哪些人再用AngularJS 前端开发人员 后端开发人员目前更多 前端、切图工程师 UI 设计师，做PSD图，然后出 HTML 静态页 后台开发人员用AngularJS更多一些 AngularJS Google ReactJS Facebook Vue 尤雨溪 硅谷 关于 AngularJS 的版本 AngularJS在2.1之后的版本不在支持Internet Explorer 6和7 在1.3之后的版本停止对Internet Explorer 8的支持 ng2 已经在2016年8月份正式发布 SAP 介绍传统的网站模型：多页面应用模型 传统的网站交互模型SPA网站模型 SPA模型 单页面应用的好处 提高了整个应用程序的响应速度、增加用户体验 重用资源 方便统一控制和代码复用 锚点的使用 案例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;锚点的使用 - 改变内容&lt;/title&gt; &lt;style&gt; body &#123; background-color: pink; &#125; .container &#123; width: 960px; height: 500px; margin: 50px auto; background-color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"#/\"&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#/download\"&gt;下载&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#/about\"&gt;关于&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=\"container\"&gt; &lt;/div&gt; &lt;script&gt; var oContainer = document.querySelector('.container') window.addEventListener('hashchange', function() &#123; // 拿到当前的 hash 内容 // 然后根据不同的 hash url地址，改变内容 var url = window.location.hash.substr(1) switch (url) &#123; case '/': oContainer.innerHTML = '首页内容' break; case '/download': oContainer.innerHTML = '下载内容' break; case '/about': oContainer.innerHTML = '关于内容' break; default: oContainer.innerHTML = 'Not Found.' break; &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; SPA 面试问题 SPA的核心是什么 锚点 监听锚点的变化事件 获取锚点内容 根据不同的锚点内容做不同的内容改变 如何在网页中解析 URL 地址：http://www.baidu.com/a/b/c?foo=bar&amp;name=jack#/abc 字符串操作 正则匹配 a DOM元素解析 为什么使用Angular以前我们是这样的： 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;传统页面操作数据操作方式&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=\"txt_value\" type=\"number\"&gt; &lt;input id=\"btn_add\" type=\"button\" value=\"增加\"&gt; &lt;script&gt; (function(window, document) &#123; var txt = document.querySelector('#txt_value'); var btn = document.querySelector('#btn_add'); btn.addEventListener('click', function(e) &#123; var now = txt.value - 0; now = now + 1; txt.value = now; &#125;); &#125;)(window, document); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 以后将会是这样的： 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;使用AngularJS实现自增功能&lt;/title&gt;&lt;/head&gt;&lt;body ng-app&gt; &lt;input type=\"number\" ng-model=\"value\"&gt; &lt;input type=\"button\" ng-click=\"value=value+1\" value=\"增加\"&gt; &lt;script src=\"../bower_components/angular/angular.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 更少的代码，实现更强劲的功能，当然不仅仅是这些，这些只是皮毛 write less , do more jQuery 提高了你操作DOM的效率 Angular 减少了DOM操作 Angular 不推崇直接操作DOM 背后带来的价值才是大大地 带领前端进入了 MV* 的时代 MVC MVVM 又是一场革命 革命的开头 2009 起 项目案例 TODOList 豆瓣电影列表 官网示例：PhoneCat AngularJS 使用场景 重型的后台管理系统 有很多增删改查 繁杂的 DOM 操作处理的页面 单页面应用程序 类似于 canvas、HTML5游戏、数据可视化应用 使用 ng 就没有意义了 学习资源推荐Installation github https://github.com/angular/angular.js/releases CDN https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js bower bower install angular#1.5.8 npm npm install angular@1.5.8 Hello World代码解析 当网页加载完毕，AngularJS 自动开始执行 HTML 页面中 ng-xxx 的属性称之为指令（Directive） ng-app 指令告诉 AngularJS ，&lt;body&gt; 元素是 AngularJS 应用程序管理的边界 ng-init 指令初始化 AngularJS 应用程序变量 ng-model 指令把文本框的 value 值绑定到变量 name 上 表达式就是把应用程序变量 name 绑定到某个元素的 innerHTML 解析过程如下图：","tags":[{"name":"AngularJS","slug":"AngularJS","permalink":"http://yoursite.com/tags/AngularJS/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"HTML5学习笔记","date":"2016-03-28T13:59:01.000Z","path":"2016/03/28/HTML5学习笔记/","text":"","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"CSS3学习笔记","date":"2016-03-05T13:59:18.000Z","path":"2016/03/05/CSS3学习笔记/","text":"","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"Ajax相关","date":"2015-10-09T13:59:53.000Z","path":"2015/10/09/Ajax相关/","text":"","tags":[{"name":"Ajax","slug":"Ajax","permalink":"http://yoursite.com/tags/Ajax/"}]},{"title":"jQuery常用插件整理","date":"2015-02-14T02:56:46.000Z","path":"2015/02/14/jQuery常用插件整理/","text":"","tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"正则表达式","date":"2015-01-05T11:12:12.000Z","path":"2015/01/05/正则表达式/","text":"","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"}]},{"title":"jQuery学习笔记（三）","date":"2014-05-06T11:11:43.000Z","path":"2014/05/06/jQuery学习笔记（三）/","text":"","tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"jQuery学习笔记（二）","date":"2014-04-29T11:11:22.000Z","path":"2014/04/29/jQuery学习笔记（二）/","text":"","tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"jQuery学习笔记（一）","date":"2014-04-18T11:10:58.000Z","path":"2014/04/18/jQuery学习笔记（一）/","text":"","tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"javaScript学习笔记（四）","date":"2014-03-26T11:10:38.000Z","path":"2014/03/26/javaScript学习笔记（四）/","text":"","tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"javaScript学习笔记（三）","date":"2014-02-20T11:09:47.000Z","path":"2014/02/20/javaScript学习笔记（三）/","text":"","tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"javaScript学习笔记（二）","date":"2014-02-17T11:09:23.000Z","path":"2014/02/17/javaScript学习笔记（二）/","text":"","tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"javaScript学习笔记（一）","date":"2014-02-16T11:08:51.000Z","path":"2014/02/16/javaScript学习笔记（一）/","text":"","tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"CSS学习笔记","date":"2014-01-15T11:07:37.000Z","path":"2014/01/15/CSS学习笔记/","text":"","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"HEXO之搭建个人博客","date":"2014-01-01T14:10:58.000Z","path":"2014/01/01/HEXO之搭建个人博客/","text":"5. 使用 Hexo 搭建自己的个人静态博客Hexo 必须安装 Node 环境 通过在终端任意目录输入 node -v 查看是否有输入node的版本 在终端的任意目录输入 npm install -g hexo-cli 然后回车执行等待安装成功 通过输入 hexo --version 如果看到输入一大堆的版本号就说明安装成功了 Hexo 是一个命令行应用程序 接下来通过输入 hexp init 博客项目存储目录 Hexo 会在你执行该命令的目录下生成一个博客项目 初始化博客项目的过程需要联网 接下来通过终端进入刚才创建的博客项目目录，然后在该目录下输入 npm install 回车等待执行结束 接下来输入 hexo server 回车执行，它会在你的本地启动一个服务器，然后就可以访问你的博客项目 进入博客项目，输入 hexo new 文章名称 创建博客 该命令会自动在 source/_posts/ 目录下生成一个 文章名称.md 文件 生成静态文件：hexo generate 该命令会自动在项目的根目录下的 public 目录下降静态文件放进去吧 快速部署 修改配置文件 在项目根路径下执行 npm install hexo-deployer-git --save 该命令 接下来就可以直接输入 hexo deploy --generate 自动发布到 github 上","tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/tags/HEXO/"}]},{"title":"Markdown笔记","date":"2014-01-01T10:55:31.000Z","path":"2014/01/01/Markdown笔记/","text":"Markdown介绍 轻量级标记语言 纯文本，所以兼容性极强，可以用所有文本编辑器打开 专注于文字写作而不是排版 格式转换方便，可以轻松转换为HTML、PPT、电子书等 Markdown 标记语法简单好记，可读性强 实时预览编辑器 []里面写文本内容 ，()里面写地址 例如：月光博客 - 好用的Markdown编辑器一览 dillinger 马克飞象 简书 MarkdownPad Sublime Text 配合 Markdown Preview 插件 Webstorm 配合插件 gitbook Markdown基本语法一级标题二级标题三级标题 标题的#号之后跟一个空格 标题与标题之间前后要保留空行 最多有六级标题 段落直接写 ，前后保留空行 哈哈哈哈哈哈哈哈哈哈 呵呵呵呵呵呵 加粗的时候，两边保留一个空格 先定个小目标，学会 Markdown ,左右保留空格 斜体也是一样，两边保留一个空格 这是一个 italic 无序列表在 - 之后 加一个空格 一级列表 二级列表 三级列表 有序列表直接在数字序号加一个点和一个空格之后写内容 有序列表中使用4个缩进进行嵌套，无序列表使用2个缩进进行嵌套 有序列表1 列表嵌套 有序列表2 图片引用 表示文本引用，例如：花非花雾非雾 引用可以写多个 在内容中如果有英文，最好在英文单词左右加空格 行内代码引用，我们可以使用 var 来声明一个变量 多行代码引用： 12var foo='bar'console.log(foo) 表格 1编号 姓名 年龄 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Markdown 相关插件 sublime中可以用一下插件帮助查看 MarkdownEditing MarkdownPreview Markdown 使用场景 学习笔记 演讲稿 写书（侧重于技术相关的内容非常适合） 个人笔记 文章博客 教学讲义 说明文档 电子邮件 只要有写作的地方，都可以使用 Markdown 来书写。 用 Markdown 写一封漂亮的电子邮件为什么要用 Markdown 写电子邮件？ 答案是：装x。当然不是了，Markdown 本身语法简单，使用 Markdown 写出来的内容结构也非常清晰，有助于协作沟通，总而言之，使用 Markdown 可以可以让你更加专注写作本身。 其实就是将md格式字符串转换成html而已，这里使用一个 Chrome 插件：Markdown Here 使用 GitBook 制作电子书GitBook 自己动手做一个 Markdown 实时预览编辑器Markdown 本身就是一个标记语言，可以通过某种方式转换成别的文本格式，本质上转换的过程其实就是做正则解析替换。 如何将markdown格式字符串转成html 使用一个第三方包：marked 给html设置样式 给代码块设置颜色高亮 highlightjs 自己动手看文档尝试一下如何加上代码高亮 Thanks https://zh.wikipedia.org/wiki/Markdown http://www.jianshu.com/p/q81RER http://wowubuntu.com/markdown/ http://www.jianshu.com/p/PpDNMG http://www.jianshu.com/p/qqGjLN https://www.zhihu.com/question/20409634 http://www.markdown.cn/","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]},{"title":"HTML","date":"2014-01-01T02:29:27.000Z","path":"2014/01/01/HTML/","text":"初识HTML","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]}]